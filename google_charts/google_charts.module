<?php
// $Id$
/**
 * @author Bruno Massa http://drupal.org/user/67164
 * @file google_charts.module
 * Use Google Charts on your site.
 *
 * @note only hooks are here.
 */

/**
 * Immplementation of hook_chartsapi().
 *
 * Its a Charts module hook. It defines almost all aspects
 * of a chart provider, like its name, what types of charts
 * it can perform and what are the restrictions.
 */
function google_charts_chartsinfo($op) {
  switch ($op) {
    case 'list':
      return array('google_charts' => 'Google Chart API');

    case 'charttypes':
      return array(
        'line2D'  => t('Line 2D'),
        'hbar2D'  => t('Horizontal Bar 2D'),
        'vbar2D'  => t('Vertical Bar 2D'),
        'pie2D'   => t('Pie 2D'),
        'pie3D'   => t('Pie 3D'),
        'venn'    => t('Venn'),
        'scatter' => t('Scatter Plot'),
      );
  }
}

/**
 * Immplementation of hook_chartsapi().
 *
 * Its a Charts module hook. It transform the data into a HTML chart.
 *
 * @param &$data
 *   Array. The
 */
function google_charts_chartsapi(&$data) {
  // Convert the chat TYPE into the Google Chart way.
  // Since its a requirement to build the chart on Google, if the value
  // was not found, return nothing and stop the execution.
  $options = array(
    'line2D'  => 'lc',
    'hbar2D'  => 'bhg',
    'vbar2D'  => 'bvg',
    'pie2D'   => 'p',
    'pie3D'   => 'p3',
    'venn'    => 'v',
    'scatter' => 's',
  );
  if (empty($options[$data['basic']['charttype']])) {
    return '';
  }
  $chart[] = 'cht='. $options[$data['basic']['charttype']];


  // Convert the chat SIZE into the Google Chart way.
  // Since its a requirement to build the chart on Google, if the value
  // was not found, return nothing and stop the execution.
  if (empty($data['layout']['width']) or empty($data['layout']['height'])) {
    return '';
  }
  $chart[] = 'chs='. $data['layout']['width'] .'x'. $data['layout']['height'];


  // Convert the chat DATA into the Google Chart way.
  // Since its a requirement to build the chart on Google, if the value
  // was not found, return nothing and stop the execution.
  if (empty($data['data'])) {
    return '';
  }
  $options = _google_charts_codingsimple($data['data'], max($data['data']));
  $chart[] = 'chd='. $options;

  // If its all ok, build the HTML img tag
  return '<img src="http://chart.apis.google.com/chart?'. implode('&amp;', $chart) .'" />';
}

/**
 * Encode the Chart data into a Alphanumeric code, follwing the
 * Google Chart API instruction. Its needed because there is a
 * size limmit to URL strings. So we reduce the amount of characters.
 *
 * It basicly uses a scale of 61 levels to represent each chart
 * value. If a more precise scale is needed, see
 * _google_charts_codingextended(), which produces a 4000 levels,
 * but also a bigger URL string.
 *
 * @param $values
 *   Array. A series of numeric data values
 * @param $max
 *   Number. The biggest number to be the reference point
 */
function _google_charts_codingsimple($values, $max) {
  // Set the list of characters and the size of the list
  $simple_encoding = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  $strlen = strlen($simple_encoding) - 1;

  // The final output is going to be build
  $chart_data = 's:';

  // For each chart value, encode it
  // Note: Underscore represents a missing value
  foreach ($values as $current_value) {
    if ($current_value >= 0) {
      $chart_data .= $simple_encoding[(round($strlen * $current_value / $max))];
    }
    else {
      $chart_data .= '_';
    }
  }

  return $chart_data;
}

function _google_charts_codingextended() {
}
